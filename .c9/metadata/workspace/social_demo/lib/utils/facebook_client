{"filter":false,"title":"facebook_client","tooltip":"/social_demo/lib/utils/facebook_client","undoManager":{"mark":9,"position":9,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":14}},"text":"class FBClient"},{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":73,"column":0}},"lines":["","      def initialize(app, access_token = nil)","        @app = app","        @access_token = access_token","      end","","      # request permission(s) from user","      def request(perms)","        #create a random verifier to identify user on fb callback","        verifier = (0...10).map{65.+(rand(25)).chr}.join","        uri = \"https://graph.facebook.com/oauth/authorize?client_id=#{@app.app_id}&redirect_uri=#{@app.connect_url}?verifier=#{verifier}&scope=#{perms}\"","","        request = { :verifier => verifier, :uri => uri }","        return request","","      end","","      def connect(code, verifier)","","        uri = URI.parse(\"https://graph.facebook.com/oauth/access_token?client_id=#{@app.app_id}&redirect_uri=#{@app.connect_url}?verifier=#{verifier}&client_secret=#{@app.secret}&code=#{CGI::escape(code)}\")","        http = Net::HTTP.new(uri.host, uri.port)","        http.use_ssl = true","","        request = Net::HTTP::Get.new(uri.path + \"?\" + uri.query)","        response = http.request(request)     ","        data = response.body","","        return data.split(\"=\")[1]","      end","","      # get, post","      def get(path, params = nil)","        uri = URI.parse(\"https://graph.facebook.com/\" + path)","        http = Net::HTTP.new(uri.host, uri.port)","        http.use_ssl = true","","        if params.nil?","          params = Hash.new","        end","","        if params[\"access_token\"].nil? ","          params[\"access_token\"] = @access_token unless @access_token.nil?","        end","","        request = Net::HTTP::Get.new(uri.path) ","        request.set_form_data( params )","        request = Net::HTTP::Get.new(uri.path + \"?\" + request.body)","","        return response = http.request(request)","      end","","      def post(path, params = nil)","        uri = URI.parse(\"https://graph.facebook.com/\" + path)","        http = Net::HTTP.new(uri.host, uri.port)","        http.use_ssl = true        ","","        if params.nil?","          params = Hash.new","        end","","        if params[:access_token].nil?","          params[:access_token] = @access_token unless @access_token.nil?","        end","","        request = Net::HTTP::Post.new(uri.path) ","        request.set_form_data( params )","        request = Net::HTTP::Post.new(uri.path + \"?\" + request.body)","","        response = http.request(request)","        response.code == \"200\" ? feed = JSON.parse(response.body) : raise(\"Sorry, an error occured. #{response.body}\")","        return feed","      end"]},{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":7}},"text":"    end"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"B"},{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":"_"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":11,"column":26},"end":{"row":11,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1409590936468,"hash":"af1367b92322f52ada5c73653fb2d80c8a1f62ce"}